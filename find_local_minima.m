%find local minima of a square matrix given an 8-neighbourhood
function minima = find_local_minima(M,equal,mindiff)
    s=size(M,1);
    if(equal) %two equal neighbors will both be considered minima
        minima = [M(:,1:end-1)<=M(:,2:end)-mindiff ones(s,1)] & ...
            [ones(s,1) M(:,2:end)<=M(:,1:end-1)-mindiff] & ...
            [M(1:end-1,:)<=M(2:end,:)-mindiff; ones(1,s)] & ...
            [ones(1,s); M(2:end,:)<=M(1:end-1,:)-mindiff] & ...
            [[M(1:end-1,1:end-1)<=M(2:end,2:end)-mindiff; ones(1,s-1)] ones(s,1)] & ...
            [ones(s,1) [ones(1,s-1); M(2:end,2:end)<=M(1:end-1,1:end-1)-mindiff]] & ...
            [[ones(s-1,1) M(1:end-1,2:end)<=M(2:end,1:end-1)-mindiff];ones(1,s)] & ...
            [ones(1,s);[M(2:end,1:end-1)<=M(1:end-1,2:end)-mindiff ones(s-1,1)]];
    else %this form cannot be trusted: of two neighbours are a minimum, neither will be picked up
        minima = [M(:,1:end-1)<M(:,2:end)-mindiff ones(s,1)] & ...
            [ones(s,1) M(:,2:end)<M(:,1:end-1)-mindiff] & ...
            [M(1:end-1,:)<M(2:end,:)-mindiff; ones(1,s)] & ...
            [ones(1,s); M(2:end,:)<M(1:end-1,:)-mindiff] & ...
            [[M(1:end-1,1:end-1)<M(2:end,2:end)-mindiff; ones(1,s-1)] ones(s,1)] & ...
            [ones(s,1) [ones(1,s-1); M(2:end,2:end)<M(1:end-1,1:end-1)-mindiff]] & ...
            [[ones(s-1,1) M(1:end-1,2:end)<M(2:end,1:end-1)-mindiff];ones(1,s)] & ...
            [ones(1,s);[M(2:end,1:end-1)<M(1:end-1,2:end)-mindiff ones(s-1,1)]];
    end
end